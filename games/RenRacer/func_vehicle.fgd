// Notes for devs:
// value_name(value type) : Tooltip : example value : "Info about this entity"

@BaseClass = targetname [ targetname(target_source) : "name" ]

@BaseClass = phys_particle_target
	[phys_particle_target(target_destination) : "phys_particle_target"]

@BaseClass = phys_static_target [phys_static_target(target_destination) : "phys_static_target"]

// func_vehicle_builtins example
//@PointClass color(255 0 0) size(-16 -16 -24, 16 16 8) model({{
//	netname == "RodBlue" -> 	{"path":"progs/hotrod.mdl","skin":0},
//	netname == "RodRed" -> 		{"path":"progs/hotrod.mdl","skin":1},
//	netname == "RodGreen" ->	{"path":"progs/hotrod.mdl","skin":2},
//	netname == "RodYellow" ->	{"path":"progs/hotrod.mdl","skin":3},
//	netname == "RodBlack" ->	{"path":"progs/hotrod.mdl","skin":4},
//	netname == "RodPink" ->		{"path":"progs/hotrod.mdl","skin":5},				
//                           "progs/hotrod.mdl"
//	}}) = func_vehicle_builtins : "Spawn a car type"
//	[
// 	netname(choices) : "Vehicle type"  =
//	[
//		"RodBlue" : "RodRed"
//		"RodRed" : "RodRed"
//		"RodGreen" : "RodGreen"
//		"RodYellow" : "RodYellow"
//		"RodBlack" : "RodBlack"
//		"RodPink" : "RodPink"
//	]]   

// func_vehicle_wheel
// func_vehicle
// func_vehicle_particle
// func_vehicle_static



// Pick your vehicle body

@PointClass base(Targetname) color(255 0 0) size(-16 -16 -24, 16 16 8) model({{
netname == "frontleft" -> 	{"path":"progs/HotRod_body.mdl"},
netname == "frontright" -> 	{"path":"progs/HotRod_body.mdl"},
netname == "backleft" ->	{"path":"progs/HotRod_body.mdl"},
netname == "backright" ->	{"path":"progs/HotRod_body.mdl"},
						 "progs/HotRod_body.mdl"
}}) = func_vehicle_static : "Pick a vehicle body..."
[
 netname(choices) : "Vehicle type" : "chassis" =
[
	"chassis" : "chassis"
	"chassis2-doesn't exist/for example" : "chassis"
	"chassis3-doesn't exist/for example" : "chassis"
	"chassis4-doesn't exist/for example" : "chassis"
]]

@PointClass base(phys_particle_target, phys_static_target) = func_vehicle : "This is the placement entity for your car part setups."
[
]


// Pick your wheel

@PointClass base(Appearflags,Targetname) color(1 0 0) size(-8 -8 -8, 8 8 8) model({{ model != Null -> model, {"path":"progs/HotRod_wheel_rear_L.mdl"} }}) = phys_wheel :
"Wheels are useful for vehicles! They're a combo of a particle and a static. Make four of these, with correct netnames and targetnames.

angle - Base-pose angle for this wheel in the physics object.

model - The model to be loaded for visualization.

netname - Useful names are frontleft, frontright, backleft, backright.

part_mass - Mass multiplier of this wheel, affects center of mass of entire object, mass of 0 makes wheel stick in mid-air, good default '1'.

physobj_bounce - '1' means no bounce, '2' means perfect reflection-bounce, good default '1.025'.

physobj_buoyancy - Gravity multiplier when under-water, good default '-0.75'.

physobj_friction_air - Directional air friction.

physobj_friction_ground - Directional ground friction, higher value on y than x is what allows steering of vehicles. z is used for damping the spring! good default '0.225 3.3 5'.

physobj_friction_water - Directional water friction, good default '2 2 2'.

physobj_spring_force - X and Y are spring forces based on distance to surface, z is unused, good default '2 4 0'.

physobj_spring_length - Length of spring for this wheel, good default 12.

physobj_stepup - Quake-style step-up in stairs. relative_size already gives some step-up inherently, but if relative_size is 0 the quake default would be '18'.

physobj_stiction - Half-assed attempt at making physics objects not slide infinitely on slopes, good default '10'.

relative_size - Radius of wheel, good default '14'.

targetname - Must be defined, used by the physics object to find the wheel."
	[
    //angle' base-pose angle for this wheel in the physics object	
	model(string) : "Pick a wheel model, bsp or mdl to be one of your wheels..." : "progs/HotRod_wheel_rear_L.mdl" : "bsp or mdl to be one of your wheels, ie: progs/wheel.mdl"
	netname(choices) : "Wheel position"  =
	[
		"frontleft" : "frontleft"
		"frontright" : "frontright"
		"backleft" : "backleft"
		"backright" : "backright"
	]
    part_mass(float) : "..heavy stuff man." : "1" : "mass multiplier of this wheel, affects center of mass of entire object, mass of 0 makes wheel stick in mid-air, good default 1"
    physobj_bounce(float) : "..bumbles bounce!" : "1.025" : "1 means no bounce, 2 means perfect reflection-bounce, a good default 1.025"
    physobj_buoyancy(float) : "..does it float?" : "-0.75" : "Gravity multiplier when under-water, good default -0.75"
    physobj_friction_air(string) : "..air friction" : "" : "Directional air friction"
    physobj_friction_ground(string) : "..sticky feets" : "0.225 3.3 5" :"directional ground friction, higher value on y than x is what allows steering of vehicles. z is used for damping the spring! good default '0.225 3.3 5'"
    physobj_friction_water(string) : "..water friction" : "2 2 2" : "Directional water friction, good default '2 2 2'"
    physobj_spring_force(string) : "..spring force" : "2 4 0" : "X and Y are spring forces based on distance to surface, Z is unused, good default '2 4 0'"
    physobj_spring_length(float) : "..spring length" : "12" : "Length of spring for this wheel, good default 12"
    physobj_stepup(float) : "..stair stepper" : "18" : "Quake-style step-up in stairs. Relative_size already gives some step-up inherently, but if relative_size is 0 the quake default would be 18"
    physobj_stiction(float) : "..slope slide control" : "10" : "Half-assed attempt at making physics objects not slide infinitely on slopes, good default 10"
    relative_size(float) : "..radius matters" : "14" : "The radius of wheel, a good default 14"
    //targetname' must be defined, used by the physics object to find the wheel
	]