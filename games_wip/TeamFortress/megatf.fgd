// Mega Team Fortress game definition file (.fgd)
// An extension of TF entities
// Created for my ALL Fortress GameConfig for Trenchbroom 2.1.0+
// Last update: 20180107 - xaGe

//Include base Teamfortress.fgd
@include "teamfortress.fgd"

// MEGA-TF SPECIFIC ADDONS

// ADDITIONAL AMBIENT SOUNDS
//=========================
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_alert :"Star Trek red alert (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_brook :"Rushing stream of water (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_chant :"Mystical chanting (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_chopper :"Hovering chopper (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_diesel :"Idling diesel engine (Mega)" [] 
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_eerie :"Cavern of wind (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_flagflap :"Flag whipping in wind (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_high_wind :"High wind sound (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_ice_moving :"Moving ice (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_jungle :"Jungle birds & animals (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_lavapit :"Boiling lava & Steam (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_meadow :"The light sound of a birdsong (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_nightpond :"Crickets & frogs (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_ocean :"Soothing ocean waves(Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_onboard :"Onboard Engines (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_peakwind :"Whistling winds (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_rocket_engine :"Rumbling rocket engines (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_unholy :"Unholy kingdoms music (Mega)" []
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_weaponfire :"Randomized play of 5 battlefield war sounds countinously w/ a random delay between each. For best effect place several around an area (Mega)" []

// User custom ambient sound
@PointClass studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = ambient_sound :"User created looping wave file (Mega)"
[
noise(string) :"subdir/loopingsound.wav (Must be a engine compatible looping wav file)"
volume(integer) :"From 0.0(silent) to 1.0(full)"
]

// User custom ambient sound repeating at random intervals
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/tb_ent.mdl", "skin": 3}) = effect_random_sound : 
"Ambient sound repeating at random intervals.
-noise : subdir/nonloopingsound.wav
-volume : From 0.0(silent) to 1.0(full)
-option : Minimum delay to wait before replaying sound.
-option2(integer) : Maximuim delay to wait before replaying sound."
[
noise(string)	 :"subdir/nonloopingsound.wav (Must be a engine compatible non-looping wav file)"
volume(integer)  :"From 0.0(silent) to 1.0(full)"
option(integer)  :"Minimum delay to wait before replaying sound."
option2(integer) :"Maximuim delay to wait before replaying sound."
]  

// Custom moving light targeted to a path_corner
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = light_move : "Moveable light requires a path corner to target to make it move. effects set to 4 is a dim light, 8 is bright."
[
effects(choices) : "brightness level..." : 4 =
	[
		4 : "dim"
		8 : "bright"
	]
speed(integer) : "How fast the light moves..."
target(string) : "Name of the required path_corner to move to..."	
]

// Allowed quake monsters 
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-32 -32 -24, 32 32 40) studio({ "path": ":progs/dog.mdl" }) = monster_dog : "Set team_no # of owner team 1, 2, 3 or 4. The guard dog can be placed near spawn points, supply rooms or any location for extra protection..."
[
team_no(choices) : "Team guard dog..." : 0 =
	[
		1 : "Team 1"
		2 : "Team 2"
		3 : "Team 3"
		4 : "Team 4"
	]
]

//Mega Team Fortress light and sound FX

@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_burner :"A pulsing set of mild explosions and flames with randomization for burns." []
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_airburst :"Explosions in the air or on ground with randomizd location on a horizontal plane within 300 Quake units in all directions." []
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_strobe :"Quick flahing strobe light like airport runway markers"
[
height(integer) :"Height must be a number to set the seconds inbetween flashes in addition to the 2 second default minimum. IE 2 + height 2 = 4 seconds between flashes"
]
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_rockfall : "A trigger entity which plays sounds of loose falling rocks. If 'height' is given # value a water splash sound will follow rocks. 120 = 1 second delay before playing water splash. Leave 'height' blank for no splash sound."
[
targetname(string) :"Give this entity a name so it can be triggered by trigger brush or switch."
height(integer) :"120 = 1 second before spalsh sound. Leave blank for no splash."
]
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_lightning : "Create random flashes or light and thunder. Place 1 or more in open areas outside high in sky and maybe near walls so the lightning reflects off surfaces."
[
targetname(string) :"Give this entity a name so it can be triggered by trigger brush or switch."
spwanflags(integer) :"The # range the snow will cover... ie: 64 = X64*Y64."
]
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_snow : "Falling snow. Place 1 or more high in open areas outside with open sky above. Note this creates a high number of entities so do not use in levels with many entities."
[
targetname(string) :"Give this entity a name so it can be triggered by trigger brush or switch."
spwanflags(integer) :"The # range the snow will cover... ie: 64 = X64*Y64."
]
@PointClass base(TfClass, Angle, Appearflags, Target, Targetname) size(-8 -8 -8, 8 8 8) studio({"path": "progs/tb/light.mdl", "skin": 0}) = effect_rain : "Falling rain. Place 1 or more high in open areas outside with open sky above. Note this creates a high number of entities so do not use in levels with many entities."
[
targetname(string) :"Give this entity a name so it can be triggered by trigger brush or switch."
spwanflags(integer) :"The # range the rain will cover... ie: 64 = X64*Y64."
]


@SolidClass = func_glass : "
Turn brushes into glass
-dmg    :Damage amount on crush
-noise  :example subdir/glassbreakfall.wav -Start motion sound if moveable.
-noise1 :example subdir/glasssmashhit.wav  -End of motion sound if moveable.
-health :0 = bulletproof, > 0 = breakable glass by damage.
-target :Target name of a train to make it moveable(optional)"
[
    dmg(integer) : "Damage amount on crush" : 3 : "default 3"
	noise(string) : "example subdir/glassbreakfall.wav -Start motion sound if moveable." :: "optional"
	noise1(string) : "example subdir/glasssmashhit.wav  -End of motion sound if moveable."
	health(integer) : "0 = bulletproof, > 0 = breakable glass by damage." : 2 : "default 2"
	target(target_source) : "Target name of a func_train to make glass moveable" :: "optional"
]

@SolidClass = func_rotate_door : "Creates a door that rotates between two positions around a point of rotation each time it's triggered.
-dmg    :Damage amount on crush
-noise  :example subdir/glassbreakfall.wav -Start motion sound if moveable.
-noise1 :example subdir/glasssmashhit.wav  -End of motion sound if moveable.
-health :0 = bulletproof, > 0 = breakable glass by damage.
-target :Target name of a train to make it moveable(optional)"
[
    dmg(integer) : "Damage amount on crush" : 3 : "default 3"
	noise(string) : "example subdir/glassbreakfall.wav -Start motion sound if moveable." :: "optional"
	noise1(string) : "example subdir/glasssmashhit.wav  -End of motion sound if moveable."
	health(integer) : "0 = bulletproof, > 0 = breakable glass by damage." : 2 : "default 2"
	target(target_source) : "Target name of a func_train to make glass moveable" :: "optional"
]

@SolidClass = info_rotate : "Rotate origin center" []
@SolidClass = func_rotate_entity : "Rotate origin center" []



//need to creat these:

//func_rotate_door
//func_rotate_train
//func_movewall
//func_nobuild

// Soccer map entities

@PointClass = ball : "add ball to map" []
@PointClass studio({"path": "progs/tb/s_light.mdl"}) = ballstart : "ball's spawn location" []
@SolidClass base(Targetname) = sandball_goal : "Goal scoring location"
[
team_no(integer) : "set team's scoring goal. 1=blue 2=red"
frags(integer) : "Amount of points to give scoring team" : 1 : "def"    
]






//working example for tb dymanic mdl loading...
//@PointClass size(32 32 16) studio({"path": mdl, "skin": skin, "frame": frame}) = misc_model : "dynamic mdl loading in TB with option to define skin & frame shown in editor
//-mdl  : progs/armor.mdl as example
//-skin  : 2 = skin 3 (red armor) as example
//-frame : defaults to empty/none"
//[
//mdl(string) : "The mdl used. (progs/armor.mdl)"
//skin(integer) : "The number of the skin on mdl." :: "optional"
//frame(integer) :"Frame of model to use if any." :: "optional"
//]
